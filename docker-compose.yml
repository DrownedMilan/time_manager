services:
  # --- PostgreSQL Database ---
  database:
    container_name: database
    image: postgres:17-bookworm
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    volumes:
      - ./.postgres_db:/var/lib/postgresql/data

  # --- Keycloak (authentification) ---
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:26.4.0
    command: start-dev
    env_file:
      - .env
    environment:
      KC_BOOTSTRAP_ADMIN_USERNAME: ${KC_BOOTSTRAP_ADMIN_USERNAME}
      KC_BOOTSTRAP_ADMIN_PASSWORD: ${KC_BOOTSTRAP_ADMIN_PASSWORD}
      KC_DB: ${KC_DB}
      KC_DB_URL_HOST: ${KC_DB_URL_HOST}
      KC_DB_URL_DATABASE: ${KC_DB_URL_DATABASE}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      KC_HTTP_PORT: ${KC_HTTP_PORT}
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HOSTNAME_STRICT: ${KC_HOSTNAME_STRICT}
      KC_LOG_LEVEL: ${KC_LOG_LEVEL}
    depends_on:
      database:
        condition: service_healthy
    ports:
      - "8080:8080"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -fs http://localhost:8080/health/ready || curl -fs http://localhost:8080 || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 10

  # --- Backend API ---
  backend:
    container_name: backend
    build: ./backend
    depends_on:
      database:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "8000:80"
    env_file:
      - .env
    volumes:
      - ./backend/app:/code/app

  # --- Frontend Web ---
  frontend:
    container_name: frontend
    build: ./frontend
    depends_on:
      - backend
    restart: unless-stopped
    ports:
      - "3000:80"
    stdin_open: true
    tty: true
    env_file:
      - .env
    volumes:
      - ./frontend:/app

  # --- Nginx Reverse Proxy ---
  nginx:
    image: nginx:1.28.0-alpine3.21
    container_name: nginx
    ports:
      - "8888:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - backend
      - frontend
    restart: always
